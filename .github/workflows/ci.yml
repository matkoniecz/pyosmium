name: CI

on: [ push, pull_request ]

jobs:
    build-default:
        runs-on: ubuntu-20.04
        if: False

        strategy:
            matrix:
                python-version: [3.6, 3.7, 3.8]

        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install packages
              run: sudo apt-get install -y -qq libboost-dev libexpat1-dev zlib1g-dev libbz2-dev libproj-dev libgeos-dev liblz4-dev

            - uses: ./.github/actions/install-dependencies

            - name: Build package
              run: python setup.py build
              shell: bash

            - name: Run tests
              run: python run_tests.py
              shell: bash
              working-directory: test


    build-ubuntu-1804:
        runs-on: ubuntu-18.04
        if: False

        strategy:
            matrix:
                compiler: [gcc, clang]

        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-python@v2
              with:
                  python-version: 3.5

            - name: Install packages
              run: sudo apt-get install -y -qq libboost-dev libexpat1-dev zlib1g-dev libbz2-dev libproj-dev libgeos-dev liblz4-dev

            - name: Install clang package
              run: sudo apt-get install -y -qq clang-6.0
              if: ${{ matrix.compiler == 'clang' }}

            - uses: ./.github/actions/install-dependencies

            - name: Build package
              run: python setup.py build
              shell: bash
              env:
                CC: gcc-7
                CXX: g++-7
              if: ${{ matrix.compiler == 'gcc' }}

            - name: Build package
              run: python setup.py build
              shell: bash
              env:
                CC: clang-6.0
                CXX: clang++-6.0
              if: ${{ matrix.compiler == 'clang' }}

            - name: Run tests
              run: python run_tests.py
              shell: bash
              working-directory: test

    build-ubuntu-2004:
        runs-on: ubuntu-20.04
        if: False

        strategy:
            matrix:
                compiler: [gcc, clang]

        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-python@v2
              with:
                  python-version: 3.9

            - name: Install packages
              run: sudo apt-get install -y -qq libboost-dev libexpat1-dev zlib1g-dev libbz2-dev libproj-dev libgeos-dev liblz4-dev

            - uses: ./.github/actions/install-dependencies

            - name: Build package
              run: python setup.py build
              shell: bash
              env:
                CC: gcc-10
                CXX: g++-10
              if: ${{ matrix.compiler == 'gcc' }}

            - name: Build package
              run: python setup.py build
              shell: bash
              env:
                CC: clang-10
                CXX: clang++-10
              if: ${{ matrix.compiler == 'clang' }}

            - name: Run tests
              run: python run_tests.py
              shell: bash
              working-directory: test

    build-macos:
        runs-on: macos-latest
        if: False

        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-python@v2
              with:
                  python-version: 3

            - name: Install packages
              run: brew install boost geos lz4
              shell: bash

            - uses: ./.github/actions/install-dependencies

            - name: Build package
              run: python setup.py build
              shell: bash

            - name: Run tests
              run: python run_tests.py
              shell: bash
              working-directory: test

    build-windows:
        runs-on: windows-2019

        defaults:
          run:
            shell: bash -l {0}

        strategy:
            matrix:
                python: [3.6, 3.7, 3.8, 3.9]

        steps:
            - uses: actions/checkout@v2

            - name: Cache conda
              uses: actions/cache@v2
              with:
                path: ~/conda_pkgs_dir
                key: ${{ runner.os }}-${{ matrix.python }}-conda-0

            - uses: conda-incubator/setup-miniconda@v2
              with:
                activate-environment: pyosmium
                python-version: ${{ matrix.python }}
                use-only-tar-bz2: true

            - name: Install prerequisites
              run: conda install boost-cpp bzip2 expat zlib shapely nose wheel


            - name: Copy libraries
              run: |
                cp $CONDA/envs/pyosmium/Library/bin/zlib.dll $CONDA/envs/pyosmium/Library/bin/expat.dll $CONDA/envs/pyosmium/Library/bin/libbz2.dll $CONDA/envs/pyosmium/Library/bin/liblz4.dll src/osmium

            - name: Clone dependant projects
              run: |
                mkdir contrib
                cd contrib
                git clone --depth 1 https://github.com/osmcode/libosmium.git
                git clone --depth 1 https://github.com/mapbox/protozero.git
                git clone --depth 1 https://github.com/pybind/pybind11.git

            - name: Build pyosmium
              run: |
                python setup.py build
                python setup.py install --user
                python setup.py bdist_wheel

            - name: Test wheel
              run: python run_tests.py
              working-directory: test

            - uses: actions/upload-artifact@v2
              with:
                name: pyosmium-wheel-win64-${{ matrix.python }}
                path: ./dist/*.whl

    test-windows:
        runs-on: windows-2019
        needs: build-windows

        defaults:
          run:
            shell: bash

        strategy:
            matrix:
                python: [3.6, 3.7, 3.8, 3.9]

        steps:
            - uses: actions/checkout@v2

            - uses: actions/download-artifact@v2
              with:
                name: pyosmium-wheel-win64-${{ matrix.python }}

            - uses: actions/cache@v2
              with:
                  path: |
                     test.osm.pbf
                  key: nominatim-test-data-0

            - uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Install wheel
              run: pip install --user *.whl

            - name: Download test file
              run: |
                  if [ ! -f test.osm.pbf ]; then
                      pip install wget
                      python -c "import wget; wget.download('https://download.geofabrik.de/europe/monaco-latest.osm.pbf', 'test.osm.pbf')"
                  fi
            - name: Run examples
              run: |
                python osm_file_stats.py ../test.osm.pbf
                python road_length.py ../test.osm.pbf
                python pub_names.py ../test.osm.pbf
              working-directory: examples
